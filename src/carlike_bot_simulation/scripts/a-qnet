class DQNAgent:
    def __init__(self, action_space, gamma=0.99, epsilon=1.0, epsilon_min=0.1, epsilon_decay=0.995, batch_size=32, replay_buffer_size=10000):
        self.action_space = action_space
        self.gamma = gamma
        self.epsilon = epsilon
        self.epsilon_min = epsilon_min
        self.epsilon_decay = epsilon_decay
        self.batch_size = batch_size
        self.replay_buffer = deque(maxlen=replay_buffer_size)

        # Initialize the Q-network and target network
        self.q_network = DQN(action_space)
        self.target_network = DQN(action_space)
        self.target_network.load_state_dict(self.q_network.state_dict())

        # Optimizer
        self.optimizer = optim.Adam(self.q_network.parameters(), lr=0.0001)

    def act(self, state):
        """Select an action using epsilon-greedy policy."""
        if np.random.rand() <= self.epsilon:
            return random.randrange(self.action_space)  # Random action
        state = torch.FloatTensor(state).unsqueeze(0)  # Add batch dimension
        q_values = self.q_network(state)
        return torch.argmax(q_values).item()  # Action with the highest Q-value

    def train(self):
        """Train the DQN agent."""
        if len(self.replay_buffer) < self.batch_size:
            return

        # Sample a batch of experiences
        batch = random.sample(self.replay_buffer, self.batch_size)
        states, actions, rewards, next_states, dones = zip(*batch)

        states = torch.FloatTensor(states)
        actions = torch.LongTensor(actions)
        rewards = torch.FloatTensor(rewards)
        next_states = torch.FloatTensor(next_states)
        dones = torch.FloatTensor(dones)

        # Compute Q-values for the current states
        q_values = self.q_network(states).gather(1, actions.unsqueeze(1)).squeeze(1)

        # Compute the target Q-values using the target network
        with torch.no_grad():
            next_q_values = self.target_network(next_states).max(1)[0]
            target_q_values = rewards + (self.gamma * next_q_values * (1 - dones))

        # Compute loss (Mean Squared Error)
        loss = nn.MSELoss()(q_values, target_q_values)

        # Perform a gradient descent step
        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()

        # Update epsilon (for epsilon-greedy exploration)
        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay

    def update_target_network(self):
        """Update the target network with the weights of the Q-network."""
        self.target_network.load_state_dict(self.q_network.state_dict())
