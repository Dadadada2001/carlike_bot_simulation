import torch
import torch.nn as nn
import torch.optim as optim

class DQN(nn.Module):
    def __init__(self, action_space):
        super(DQN, self).__init__()
        self.action_space = action_space
        self.conv1 = nn.Conv2d(3, 16, kernel_size=8, stride=4)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=4, stride=2)
        self.fc1 = nn.Linear(32 * 9 * 9 + 3, 512)  # Flattened image + position (x, y, velocity)
        self.fc2 = nn.Linear(512, self.action_space)

    def forward(self, x):
        image_input = x[:, :-3].view(-1, 3, 84, 84)  # The first part of the input is the image
        position_input = x[:, -3:]  # The last 3 elements are the position and velocity
        
        x = torch.relu(self.conv1(image_input))
        x = torch.relu(self.conv2(x))
        x = x.view(x.size(0), -1)  # Flatten the convolution output
        x = torch.relu(self.fc1(torch.cat((x, position_input), dim=1)))  # Concatenate image and position data
        return self.fc2(x)
